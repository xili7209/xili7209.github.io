<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>AQS</title>
    <link href="/2021/10/28/AQS/"/>
    <url>/2021/10/28/AQS/</url>
    
    <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="什么是AQS-为什么它是核心"><a href="#什么是AQS-为什么它是核心" class="headerlink" title="什么是AQS? 为什么它是核心"></a>什么是AQS? 为什么它是核心</h3><p><strong>Ans</strong>:AQS是一个用来构建锁和同步器的框架，使用AQS能简单且高效地构造出应用广泛的大量的同步器，比如我们提到的ReentrantLock，Semaphore，其他的诸如ReentrantReadWriteLock，SynchronousQueue，FutureTask等等皆是基于AQS的。当然，我们自己也能利用AQS非常轻松容易地构造出符合我们自己需求的同步器。</p><h3 id="AQS的核心思想是什么-它是怎么实现的-底层数据结构"><a href="#AQS的核心思想是什么-它是怎么实现的-底层数据结构" class="headerlink" title="AQS的核心思想是什么? 它是怎么实现的? 底层数据结构"></a>AQS的核心思想是什么? 它是怎么实现的? 底层数据结构</h3><p><strong>Ans</strong>:AQS核心思想是，如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并且将共享资源设置为锁定状态。如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制AQS是用CLH（虚拟的双向队列）队列锁实现的，即将暂时获取不到锁的线程加入到队列中</p><p>AQS使用一个int成员变量来表示同步状态，通过内置的FIFO队列来完成获取资源线程的排队工作。AQS使用CAS对该同步状态进行原子操作实现对其值的修改。<br>AbstractQueuedSynchronizer类有两个内部类，分别为Node类与ConditionObject类</p><p>Node：每个线程被阻塞的线程都会被封装成一个Node结点，放入队列。每个节点包含了一个Thread类型的引用，并且每个节点都存在一个状态<br>状态：</p><ul><li>CANCELLED（1）表示当前的线程被取消</li><li>SIGNAL （-1）当前节点的后继节点包含的线程需要运行，需要进行unpark操作</li><li>CONDITION（-2）表示当前节点在等待condition，也就是在condition queue中</li><li>PROPAGATE （-3） 当前场景下后续的acquireShared能够得以执行</li><li>0 表示当前节点在sync queue中，等待着获取锁</li></ul><p>Condition：await、signal方法，用来等待条件、释放条件<br><img src="https://user-images.githubusercontent.com/58756074/139201031-f1fe0071-1f35-439d-ab3c-7db2fc142c58.png" alt="aqs底层"><br>其中Sync queue，即同步队列，是双向链表，包括head结点和tail结点，head结点主要用作后续的调度。而Condition queue不是必须的，其是一个单向链表，只有当使用Condition时，才会存在此单向链表。并且可能会有多个Condition queue</p><p>AQS继承AbstractOwnableSynchronizer可以设置独占资源线程和获取独占资源线程。分别为setExclusiveOwnerThread与getExclusiveOwnerThread方法，这两个方法会被子类调用<br>AbstractQueuedSynchronizer：头结点head，尾结点tail，状态state、自旋时间spinForTimeoutThreshold，还有AbstractQueuedSynchronizer抽象的属性在内存中的偏移地址，通过该偏移地址，可以获取和设置该属性的值，同时还包括一个静态初始化块，用于加载内存偏移地址</p><h3 id="AQS有哪些核心的方法"><a href="#AQS有哪些核心的方法" class="headerlink" title="AQS有哪些核心的方法"></a>AQS有哪些核心的方法</h3><p><strong>Ans</strong>:aquire（该方法以独占模式获取(资源)，忽略中断，即线程在aquire过程中，中断此线程是无效的）<br><img src="https://user-images.githubusercontent.com/58756074/139203709-a4ac3160-9dfd-415f-b381-6ee961d00280.png" alt="aquire流程"><br>调用子类实现tryAcquire独占对象，成功则获取不成功addWaiter加入等待队列（Sync queue）如果sync queue队列还没有初始化，则会使用enq插入队列中，调用acquireQueued方法，此方法完成的功能是Sync queue中的结点不断尝试获取资源，若成功，则返回true，否则，返回false</p><ul><li>每一个结点都是由前一个结点唤醒</li><li>当结点发现前驱结点是head并且尝试获取成功，则会轮到该线程运行</li><li>condition queue中的结点向sync queue中转移是通过signal操作完成的</li><li>当结点的状态为SIGNAL时，表示后面的结点需要运行</li></ul><p>release释放资源（tryRelease的默认实现是抛出异常，需要具体的子类实现，如果tryRelease成功，那么如果头结点不为空并且头结点的状态不为0，则释放头结点的后继结点）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">int</span> state;<span class="hljs-comment">//共享变量，使用volatile修饰保证线程可见性</span><br><br><span class="hljs-comment">//返回同步状态的当前值</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getState</span><span class="hljs-params">()</span> </span>&#123;  <br>        <span class="hljs-keyword">return</span> state;<br>&#125;<br> <span class="hljs-comment">// 设置同步状态的值</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setState</span><span class="hljs-params">(<span class="hljs-keyword">int</span> newState)</span> </span>&#123; <br>        state = newState;<br>&#125;<br><span class="hljs-comment">//原子地(CAS操作)将同步状态值设置为给定值update如果当前同步状态的值等于expect(期望值)</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">compareAndSetState</span><span class="hljs-params">(<span class="hljs-keyword">int</span> expect, <span class="hljs-keyword">int</span> update)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> unsafe.compareAndSwapInt(<span class="hljs-keyword">this</span>, stateOffset, expect, update);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="AQS定义什么样的资源获取方式"><a href="#AQS定义什么样的资源获取方式" class="headerlink" title="AQS定义什么样的资源获取方式"></a>AQS定义什么样的资源获取方式</h3><p><strong>Ans</strong>:独占（只有一个线程能访问执行，又根据是否按队列的顺序分为公平锁和非公平锁）和共享（多个线程可同时访问执行）<br>AQS定义了两种资源获取方式：<br>独占(只有一个线程能访问执行，又根据是否按队列的顺序分为公平锁和非公平锁，如ReentrantLock) </p><p>共享(多个线程可同时访问执行，如Semaphore、CountDownLatch、 CyclicBarrier )。</p><p>ReentrantReadWriteLock可以看成是组合式，允许多个线程同时对某一资源进行读</p><p>不同的自定义同步器争用共享资源的方式也不同。自定义同步器在实现时只需要实现共享资源 state 的获取与释放方式即可，至于具体线程等待队列的维护(如获取资源失败入队/唤醒出队等)，AQS已经在上层已经帮我们实现好了</p><h3 id="AQS底层使用了什么样的设计模式-模板"><a href="#AQS底层使用了什么样的设计模式-模板" class="headerlink" title="AQS底层使用了什么样的设计模式? 模板"></a>AQS底层使用了什么样的设计模式? 模板</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">isHeldExclusively()<span class="hljs-comment">//该线程是否正在独占资源。只有用到condition才需要去实现它。</span><br>tryAcquire(<span class="hljs-keyword">int</span>)<span class="hljs-comment">//独占方式。尝试获取资源，成功则返回true，失败则返回false。</span><br>tryRelease(<span class="hljs-keyword">int</span>)<span class="hljs-comment">//独占方式。尝试释放资源，成功则返回true，失败则返回false。</span><br>tryAcquireShared(<span class="hljs-keyword">int</span>)<span class="hljs-comment">//共享方式。尝试获取资源。负数表示失败；0表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。</span><br>tryReleaseShared(<span class="hljs-keyword">int</span>)<span class="hljs-comment">//共享方式。尝试释放资源，成功则返回true，失败则返回false。</span><br></code></pre></td></tr></table></figure><p>默认情况下，每个方法都抛出 UnsupportedOperationException。 这些方法的实现必须是内部线程安全的，并且通常应该简短而不是阻塞。AQS类中的其他方法都是final ，所以无法被其他类使用，只有这几个方法可以被其他类使用</p><h3 id="AQS的应用示例"><a href="#AQS的应用示例" class="headerlink" title="AQS的应用示例"></a>AQS的应用示例</h3>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Juc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CAS</title>
    <link href="/2021/10/28/CAS/"/>
    <url>/2021/10/28/CAS/</url>
    
    <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="线程安全的实现方法有哪些"><a href="#线程安全的实现方法有哪些" class="headerlink" title="线程安全的实现方法有哪些"></a>线程安全的实现方法有哪些</h3><p><strong>Ans</strong>:</p><ul><li>互斥同步: synchronized 和 ReentrantLock</li><li>非阻塞同步: CAS, AtomicXXXX</li><li>无同步方案: 栈封闭，Thread Local，可重入代码</li></ul><h3 id="什么是CAS（Compare-And-Swap）"><a href="#什么是CAS（Compare-And-Swap）" class="headerlink" title="什么是CAS（Compare-And-Swap）"></a>什么是CAS（Compare-And-Swap）</h3><p><strong>Ans</strong>:CAS是一条CPU的原子指令，其作用是让CPU先进行比较两个值是否相等，然后原子地更新某个位置的值，经过调查发现，其实现方式是基于硬件平台的汇编指令，就是说CAS是靠硬件实现的，JVM只是封装了汇编调用，那些AtomicInteger类便是使用了这些封装后的接口</p><p>CAS操作需要输入两个数值，一个旧值(期望操作前的值)和一个新值，在操作期间先比较下在旧值有没有发生变化，如果没有发生变化，才交换成新值，发生了变化则不交换<br>CAS操作是原子性的，所以多线程并发使用CAS更新数据时，可以不使用锁。JDK中大量使用了CAS来更新数据而防止加锁(synchronized 重量级锁)来保持原子更新</p><h3 id="CAS使用示例，结合AtomicInteger给出示例"><a href="#CAS使用示例，结合AtomicInteger给出示例" class="headerlink" title="CAS使用示例，结合AtomicInteger给出示例"></a>CAS使用示例，结合AtomicInteger给出示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestwithSynchronized</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> i++;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestwithCAS</span> </span>&#123;<br>    <span class="hljs-keyword">private</span>  AtomicInteger i = <span class="hljs-keyword">new</span> AtomicInteger(<span class="hljs-number">0</span>);<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> i.addAndGet(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="CAS会有哪些问题"><a href="#CAS会有哪些问题" class="headerlink" title="CAS会有哪些问题"></a>CAS会有哪些问题</h3><p>CAS 方式为乐观锁，synchronized 为悲观锁。因此使用 CAS 解决并发问题通常情况下性能更优<br>问题：<br><strong>ABA</strong>：<br>因为CAS需要在操作值的时候，检查值有没有发生变化，比如没有发生变化则更新，但是如果一个值原来是A，变成了B，又变成了A，那么使用CAS进行检查时则会发现它的值没有发生变化，但是实际上却变化了</p><p><strong>循环时间长开销大</strong>：<br>自旋CAS如果长时间不成功，会给CPU带来非常大的执行开销。</p><p><strong>只能保证一个共享变量的原子操作</strong>：<br>当对一个共享变量执行操作时，我们可以使用循环CAS的方式来保证原子操作，但是对多个共享变量操作时，循环CAS就无法保证操作的原子性，这个时候就可以用锁</p><h3 id="针对这这些问题，Java提供了哪几个解决的"><a href="#针对这这些问题，Java提供了哪几个解决的" class="headerlink" title="针对这这些问题，Java提供了哪几个解决的"></a>针对这这些问题，Java提供了哪几个解决的</h3><p>ABA：ABA问题的解决思路就是使用版本号。在变量前面追加上版本号，每次变量更新的时候把版本号加1，那么A-&gt;B-&gt;A就会变成1A-&gt;2B-&gt;3A<br>JDK的Atomic包里提供了一个类AtomicStampedReference来解决ABA问题：这个类的compareAndSet方法的作用是首先检查当前引用是否等于预期引用，并且检查当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值</p><p>循环时间长开销大：如果JVM能支持处理器提供的pause指令，那么效率会有一定的提升。pause指令有两个作用：第一，它可以延迟流水线执行命令(de-pipeline)，使CPU不会消耗过多的执行资源，延迟的时间取决于具体实现的版本，在一些处理器上延迟时间是零；第二，它可以避免在退出循环的时候因内存顺序冲突(Memory Order Violation)而引起CPU流水线被清空(CPU Pipeline Flush)，从而提高CPU的执行效率</p><p>只能保证一个共享变量的原子操作：从Java 1.5开始，JDK提供了AtomicReference类来保证引用对象之间的原子性，就可以把多个变量放在一个对象里来进行CAS操作</p><h3 id="AtomicInteger底层实现-CAS-volatile"><a href="#AtomicInteger底层实现-CAS-volatile" class="headerlink" title="AtomicInteger底层实现? CAS+volatile"></a>AtomicInteger底层实现? CAS+volatile</h3><p>volatile保证线程的可见性，多线程并发时，一个线程修改数据，可以保证其它线程立马看到修改后的值</p><p>CAS 保证数据更新的原子性</p><h3 id="请阐述你对Unsafe类的理解"><a href="#请阐述你对Unsafe类的理解" class="headerlink" title="请阐述你对Unsafe类的理解?"></a>请阐述你对Unsafe类的理解?</h3><p><strong>Ans</strong>:主要提供一些用于执行低级别、不安全操作的方法，如直接访问系统内存资源、自主管理内存资源等，这些方法在提升Java运行效率、增强Java语言底层资源操作能力方面起到了很大的作用。但由于Unsafe类使Java语言拥有了类似C语言指针一样操作内存空间的能力，这无疑也增加了程序发生相关指针问题的风险<br><img src="https://user-images.githubusercontent.com/58756074/139192305-e04f087f-ea3b-4e77-bce3-60b394ea6f24.png" alt="unsafe"><br>如上图所示，Unsafe提供的API大致可分为内存操作、CAS、Class相关、对象操作、线程调度、系统信息获取、内存屏障、数组操作等几类</p><p>我们发现Unsafe只提供了3种CAS方法：compareAndSwapObject、compareAndSwapInt和compareAndSwapLong。都是native方法</p><h3 id="说说你对Java原子类的理解-包含13个，4组分类，说说作用和使用场景"><a href="#说说你对Java原子类的理解-包含13个，4组分类，说说作用和使用场景" class="headerlink" title="说说你对Java原子类的理解? 包含13个，4组分类，说说作用和使用场景"></a>说说你对Java原子类的理解? 包含13个，4组分类，说说作用和使用场景</h3><p>原子更新基本类型：</p><ul><li>AtomicBoolean: 原子更新布尔类型。</li><li>AtomicInteger: 原子更新整型。</li><li>AtomicLong: 原子更新长整型。</li></ul><p>原子更新数组：</p><ul><li>AtomicIntegerArray: 原子更新整型数组里的元素。</li><li>AtomicLongArray: 原子更新长整型数组里的元素。</li><li>AtomicReferenceArray: 原子更新引用类型数组里的元素。<br>常用方法：get（int index）获取索引为index的元素值，compareAndSet(int i,E expect,E update): 如果当前值等于预期值，则以原子方式将数组位置i的元素设置为update值</li></ul><p>原子更新引用类型：</p><ul><li>AtomicReference: 原子更新引用类型。</li><li>AtomicStampedReference: 原子更新引用类型, 内部使用Pair来存储元素值及其版本号。</li><li>AtomicMarkableReferce: 原子更新带有标记位的引用类型。<br>这三个类提供的方法都差不多，首先构造一个引用对象，然后把引用对象set进Atomic类，然后调用compareAndSet等一些方法去进行原子操作，原理都是基于Unsafe实现，但AtomicReferenceFieldUpdater略有不同，更新的字段必须用volatile修饰</li></ul><p>原子更新字段类：</p><ul><li>AtomicIntegerFieldUpdater: 原子更新整型的字段的更新器</li><li>AtomicLongFieldUpdater: 原子更新长整型字段的更新器</li><li>AtomicStampedFieldUpdater: 原子更新带有版本号的引用类型</li><li>AtomicReferenceFieldUpdater：字段必须是volatile类型的，在线程之间共享变量时保证立即可见，不能加static，不能final<br>对于AtomicIntegerFieldUpdater和AtomicLongFieldUpdater只能修改int/long类型的字段，不能修改其包装类型(Integer/Long)。如果要修改包装类型就需要使用AtomicReferenceFieldUpdater</li></ul><h3 id="AtomicStampedReference是什么"><a href="#AtomicStampedReference是什么" class="headerlink" title="AtomicStampedReference是什么"></a>AtomicStampedReference是什么</h3><p><strong>Ans</strong>:原子更新引用类型, 内部使用Pair来存储元素值及其版本号</p><h3 id="AtomicStampedReference是怎么解决ABA的-内部使用Pair来存储元素值及其版本号"><a href="#AtomicStampedReference是怎么解决ABA的-内部使用Pair来存储元素值及其版本号" class="headerlink" title="AtomicStampedReference是怎么解决ABA的? 内部使用Pair来存储元素值及其版本号"></a>AtomicStampedReference是怎么解决ABA的? 内部使用Pair来存储元素值及其版本号</h3><p><strong>Ans</strong>:AtomicStampedReference主要维护包含一个对象引用以及一个可以自动更新的整数”stamp”的pair对象来解决ABA问题</p><ul><li>如果元素值和版本号都没有变化，并且和新的也相同，返回true</li><li>如果元素值和版本号都没有变化，并且和新的不完全相同，就构造一个新的Pair对象并执行CAS更新pair<br>解决思路：</li><li>首先，使用版本号控制</li><li>其次，不重复使用节点(Pair)的引用，每次都新建一个新的Pair来作为CAS比较的对象，而不是复用旧的</li><li>最后，外部传入元素值及版本号，而不是节点(Pair)的引用<h3 id="java中还有哪些类可以解决ABA的问题-AtomicMarkableReference"><a href="#java中还有哪些类可以解决ABA的问题-AtomicMarkableReference" class="headerlink" title="java中还有哪些类可以解决ABA的问题? AtomicMarkableReference"></a>java中还有哪些类可以解决ABA的问题? AtomicMarkableReference</h3></li></ul><p><strong>Ans</strong>:AtomicMarkableReference，它不是维护一个版本号，而是维护一个boolean类型的标记，标记值有修改，了解一下。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Juc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>final</title>
    <link href="/2021/10/28/final/"/>
    <url>/2021/10/28/final/</url>
    
    <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="所有的final修饰的字段都是编译期常量吗"><a href="#所有的final修饰的字段都是编译期常量吗" class="headerlink" title="所有的final修饰的字段都是编译期常量吗"></a>所有的final修饰的字段都是编译期常量吗</h3><p><strong>Ans</strong>:不是所有的final修饰的字段都是编译期常量，只是k的值在被初始化后无法被更改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-comment">//编译期常量</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> J = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span>[] a = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br>    <span class="hljs-comment">//非编译期常量</span><br>    Random r = <span class="hljs-keyword">new</span> Random();<br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> k = r.nextInt();<span class="hljs-comment">//k的值由随机数对象决定</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>题外话：final一般只需在调用前赋值就行（一般在constructor中赋值），不过如果static final则需一开始赋值</p><h3 id="如何理解private所修饰的方法是隐式的final"><a href="#如何理解private所修饰的方法是隐式的final" class="headerlink" title="如何理解private所修饰的方法是隐式的final"></a>如何理解private所修饰的方法是隐式的final</h3><p><strong>Ans</strong>:private方法无法被继承，无覆盖这一说<br>类中所有private方法都隐式地指定为final的，由于无法取用private方法，所以也就不能覆盖它。可以对private方法增添final关键字，但这样做并没有什么好处</p><h3 id="说说final类型的类如何拓展-比如String是final类型，我们想写个MyString复用所有String中方法，同时增加一个新的toMyString-的方法，应该如何做"><a href="#说说final类型的类如何拓展-比如String是final类型，我们想写个MyString复用所有String中方法，同时增加一个新的toMyString-的方法，应该如何做" class="headerlink" title="说说final类型的类如何拓展? 比如String是final类型，我们想写个MyString复用所有String中方法，同时增加一个新的toMyString()的方法，应该如何做"></a>说说final类型的类如何拓展? 比如String是final类型，我们想写个MyString复用所有String中方法，同时增加一个新的toMyString()的方法，应该如何做</h3><p><strong>Ans</strong>:写个新类复用final类方法，再新增方法</p><h3 id="final方法可以被重载吗-可以"><a href="#final方法可以被重载吗-可以" class="headerlink" title="final方法可以被重载吗? 可以"></a>final方法可以被重载吗? 可以</h3><p><strong>Ans</strong>:final方法可重载，支持多态</p><h3 id="父类的final方法能不能够被子类重写-不可以"><a href="#父类的final方法能不能够被子类重写-不可以" class="headerlink" title="父类的final方法能不能够被子类重写? 不可以"></a>父类的final方法能不能够被子类重写? 不可以</h3><p><strong>Ans</strong>:final方法是无法被覆盖的</p><h3 id="说说final域重排序规则"><a href="#说说final域重排序规则" class="headerlink" title="说说final域重排序规则"></a>说说final域重排序规则</h3><p><strong>基本类型</strong>：<br>写final域的重排序规则禁止对final域的写重排序到构造函数之外，这个规则的实现主要包含了两个方面：</p><ul><li>JMM禁止编译器把final域的写重排序到构造函数之外</li><li>编译器会在final域写之后，构造函数return之前，插入一个storestore屏障。这个屏障可以禁止处理器把final域的写重排序到构造函数之外<br>写final域的重排序规则可以确保：在对象引用为任意线程可见之前，对象的final域已经被正确初始化过了，而普通域就不具有这个保障。</li></ul><p>读final域重排序规则为：在一个线程中，初次读对象引用和初次读该对象包含的final域，JMM会禁止这两个操作的重排序。(注意，这个规则仅仅是针对处理器)，处理器会在读final域操作的前面插入一个LoadLoad屏障。实际上，读对象的引用和读该对象的final域存在间接依赖性，一般处理器不会重排序这两个操作。但是有一些处理器会重排序，因此，这条禁止重排序规则就是针对这些处理器而设定的。</p><p>读对象的普通域被重排序到了读对象引用的前面就会出现线程B还未读到对象引用就在读取该对象的普通域变量，这显然是错误的操作。而final域的读操作就“限定”了在读final域变量前已经读到了该对象的引用，从而就可以避免这种情况。<br>人话来说不做final限定可能导致线程在读对象引用前就读普通field但final可以保证这种重排序不被发生</p><p><strong>引用类型</strong>：<br>写规则：除不得重排到构造函数之外，禁止在构造函数对一个final修饰的对象的成员域的写入与随后将这个被构造的对象的引用赋值给引用变量 重排序<br>对final修饰对象的成员写入不能和该对象的引用赋值重排序</p><h3 id="说说final的原理"><a href="#说说final的原理" class="headerlink" title="说说final的原理"></a>说说final的原理</h3><p>写final域会要求编译器在final域写之后，构造函数返回前插入一个StoreStore屏障。读final域的重排序规则会要求编译器在读final域的操作前插入一个LoadLoad屏障</p><h3 id="使用-final-的限制条件和局限性"><a href="#使用-final-的限制条件和局限性" class="headerlink" title="使用 final 的限制条件和局限性"></a>使用 final 的限制条件和局限性</h3><p><strong>Ans</strong>:当声明一个 final 成员时，必须在构造函数退出前设置它的值。将指向对象的成员声明为 final 只能将该引用设为不可变的，而非所指的对象。(list)<br>如果一个对象将会在多个线程中访问并且你并没有将其成员声明为 final，则必须提供其他方式保证线程安全<br>“ 其他方式 “ 可以包括声明成员为 volatile，使用 synchronized 或者显式 Lock 控制所有该成员的访问</p><h3 id="类型自动转换问题"><a href="#类型自动转换问题" class="headerlink" title="类型自动转换问题"></a>类型自动转换问题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">byte</span> b1=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">byte</span> b2=<span class="hljs-number">3</span>;<br><span class="hljs-keyword">byte</span> b3=b1+b2;<span class="hljs-comment">//当程序执行到这一行的时候会出错，因为b1、b2可以自动转换成int类型的变量，运算时java虚拟机对它进行了转换，结果导致把一个int赋值给byte-----出错</span><br><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">byte</span> b1=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">final</span> <span class="hljs-keyword">byte</span> b2=<span class="hljs-number">3</span>;<br><span class="hljs-keyword">byte</span> b3=b1+b2;<span class="hljs-comment">//不会出错，相信你看了上面的解释就知道原因了。</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Juc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>volatile</title>
    <link href="/2021/10/28/volatile/"/>
    <url>/2021/10/28/volatile/</url>
    
    <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="volatile关键字的作用是什么"><a href="#volatile关键字的作用是什么" class="headerlink" title="volatile关键字的作用是什么"></a>volatile关键字的作用是什么</h3><ul><li>防重排序<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> Singleton singleton;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构造函数私有，禁止外部实例化</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123;&#125;;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (singleton == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span> (singleton.class) &#123;<br>                <span class="hljs-keyword">if</span> (singleton == <span class="hljs-keyword">null</span>) &#123;<br>                    singleton = <span class="hljs-keyword">new</span> Singleton();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> singleton;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>实例化对象过程：分配内存空间，初始化对象，将内存空间地址赋值给对应引用<br>由于操作系统对对指令进行重排序可能会变成：分配内存空间，将内存空间地址赋值给对应引用，初始化对象<br>多线程环境下就可能将一个未初始化的对象引用暴露出来，从而导致不可预料的结果。因此，为了防止这个过程的重排序，我们需要将变量设置为volatile类型的变量</li></ul><p>为了实现 volatile 内存语义时，编译器在生成字节码时，会在指令序列中插入内存屏障来禁止特定类型的处理器重排序<br>内存屏障|说明<br>—|:–:<br>StoreStore|禁止上面的普通写和下面的 volatile 写重排序<br>StoreLoad|防止上面的 volatile 写与下面可能有的 volatile 读/写重排序<br>LoadLoad |禁止下面所有的普通读操作和上面的 volatile 读重排序<br>LoadStore|禁止下面所有的普通写操作和上面的 volatile 读重排序</p><ul><li>插入屏障：<ul><li>在每个 volatile 写操作的前面插入一个 StoreStore 屏障</li><li>在每个 volatile 写操作的后面插入一个 StoreLoad 屏障</li><li>在每个 volatile 读操作的后面插入一个 LoadLoad 屏障</li><li>在每个 volatile 读操作的后面插入一个 LoadStore 屏障</li></ul></li></ul><ul><li><p>实现可见性<br>可见性问题主要指一个线程修改了共享变量值，而另一个线程却看不到。引起可见性问题的主要原因是每个线程拥有自己的一个高速缓存区——线程工作内存。</p></li><li><p>保证原子性:单次读/写</p></li></ul><p>volatile不能保证完全的原子性，只能保证单次的读/写操作具有原子性</p><h3 id="volatile能保证原子性吗"><a href="#volatile能保证原子性吗" class="headerlink" title="volatile能保证原子性吗"></a>volatile能保证原子性吗</h3><p><strong>Ans</strong>:volatile不能保证完全的原子性，只能保证单次的读/写操作具有原子性</p><h3 id="之前32位机器上共享的long和double变量的为什么要用volatile-现在64位机器上是否也要设置呢"><a href="#之前32位机器上共享的long和double变量的为什么要用volatile-现在64位机器上是否也要设置呢" class="headerlink" title="之前32位机器上共享的long和double变量的为什么要用volatile? 现在64位机器上是否也要设置呢?"></a>之前32位机器上共享的long和double变量的为什么要用volatile? 现在64位机器上是否也要设置呢?</h3><p><strong>Ans</strong>:因为long和double两种数据类型的操作可分为高32位和低32位两部分，因此普通的long或double类型读/写可能不是原子的。因此，鼓励大家将共享的long和double变量设置为volatile类型，这样能保证任何情况下对long和double的单次读/写操作都具有原子性。</p><p>目前各种平台下的商用虚拟机都选择把 64 位数据的读写操作作为原子操作来对待，因此我们在编写代码时一般不把long 和 double 变量专门声明为 volatile多数情况下也是不会错的</p><h3 id="i-为什么不能保证原子性"><a href="#i-为什么不能保证原子性" class="headerlink" title="i++为什么不能保证原子性"></a>i++为什么不能保证原子性</h3><p><strong>Ans</strong>:对于原子性，需要强调一点，也是大家容易误解的一点：对volatile变量的单次读/写操作可以保证原子性的，如long和double类型变量，但是并不能保证i++这种操作的原子性，因为本质上i++是读、写两次操作<br>i++ = 读取i，对i+1，将i写回内存<br>volatile是无法保证这三个操作是具有原子性的，我们可以通过AtomicInteger或者Synchronized来保证+1操作的原子性</p><h3 id="volatile是如何实现可见性的-内存屏障"><a href="#volatile是如何实现可见性的-内存屏障" class="headerlink" title="volatile是如何实现可见性的? 内存屏障"></a>volatile是如何实现可见性的? 内存屏障</h3><p><strong>Ans</strong>:volatile保证数据发生改变立即写入内存，在总线嗅探的帮助下其他处理器可以马上知道自己的缓存数据已脏，下次调用的时候直接从内存读取新数据<br>Memory Barrier是一个 CPU 指令，插入一条内存屏障会告诉编译器和 CPU：不管什么指令都不能和这条 Memory Barrier 指令重排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">int</span> a;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span> </span>&#123;<br>        a = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Test test = <span class="hljs-keyword">new</span> Test();<br>        test.update();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">0x0000000002951563: and    $0xffffffffffffff87,%rdi<br>0x0000000002951567: je     0x00000000029515f8<br>0x000000000295156d: test   $0x7,%rdi<br>0x0000000002951574: jne    0x00000000029515bd<br>0x0000000002951576: test   $0x300,%rdi<br>0x000000000295157d: jne    0x000000000295159c<br>0x000000000295157f: and    $0x37f,%rax<br>0x0000000002951586: mov    %rax,%rdi<br>0x0000000002951589: or     %r15,%rdi<br>0x000000000295158c: lock cmpxchg %rdi,(%rdx)  //在 volatile 修饰的共享变量进行写操作的时候会多出 lock 前缀的指令<br>0x0000000002951591: jne    0x0000000002951a15<br>0x0000000002951597: jmpq   0x00000000029515f8<br>0x000000000295159c: mov    0x8(%rdx),%edi<br>0x000000000295159f: shl    $0x3,%rdi<br>0x00000000029515a3: mov    0xa8(%rdi),%rdi<br>0x00000000029515aa: or     %r15,%rdi<br></code></pre></td></tr></table></figure><p>lock前缀：将当前处理器缓存行的数据写回到系统内存，写回内存的操作会使在其他 CPU 里缓存了该内存地址的额数据无效<br>如果对声明了 volatile 的变量进行写操作，JVM 就会向处理器发送一条 lock 前缀的指令，将这个变量所在缓存行的数据写回到系统内存。</p><p>联动OS：为了保证各个处理器的缓存是一致的，实现了缓存一致性协议(MESI)，每个处理器通过嗅探在总线上传播的数据来检查自己缓存的值是不是过期了，当处理器发现自己缓存行对应的内存地址被修改，就会将当前处理器的缓存行设置成无效状态，当处理器对这个数据进行修改操作的时候，会重新从系统内存中把数据读到处理器缓存里。</p><h3 id="volatile是如何实现有序性的-happens-before等"><a href="#volatile是如何实现有序性的-happens-before等" class="headerlink" title="volatile是如何实现有序性的? happens-before等"></a>volatile是如何实现有序性的? happens-before等</h3><p><strong>Ans</strong>:happens-before 规则中有一条是 volatile 变量规则：对一个 volatile 域的写，happens-before 于任意后续对这个 volatile 域的读</p><h3 id="说下volatile的应用场景"><a href="#说下volatile的应用场景" class="headerlink" title="说下volatile的应用场景"></a>说下volatile的应用场景</h3><p><strong>Ans</strong>:状态标志（仅仅是使用一个布尔状态标志），开销较低的读－写锁策略（synchronized保证原子性，volatile保证可见性），double-checked（单例模式防止重排序）</p><p>条件：</p><ul><li>对变量的写操作不依赖于当前值</li><li>该变量没有包含在具有其他变量的不变式中</li><li>只有在状态真正独立于程序内其他内容时才能使用 volatile</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Juc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>synchronized</title>
    <link href="/2021/10/27/synchronized/"/>
    <url>/2021/10/27/synchronized/</url>
    
    <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Synchronized可以作用在哪里-分别通过对象锁和类锁进行举例"><a href="#Synchronized可以作用在哪里-分别通过对象锁和类锁进行举例" class="headerlink" title="Synchronized可以作用在哪里? 分别通过对象锁和类锁进行举例"></a>Synchronized可以作用在哪里? 分别通过对象锁和类锁进行举例</h3><p><strong>Ans</strong>：对象锁分为方法锁和同步块锁，其中方法锁默认作用于当前实例也就是this，同步块代码锁则是自定义锁。类锁则是指synchronized的方法锁作用在静态方法上或者是类上，这类锁无论多少线程访问都只有一把锁。</p><ul><li>对象锁 (默认this,指定对象)</li></ul><p>包括方法锁(默认锁对象为this,当前实例对象)和同步代码块锁(自己指定锁对象)</p><p><strong>代码块形式：手动指定锁定对象，也可是是this,也可以是自定义的锁</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SynchronizedObjectLock</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> SynchronizedObjectLock instance = <span class="hljs-keyword">new</span> SynchronizedObjectLock();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 同步代码块形式——锁为this,两个线程使用的锁是一样的,线程1必须要等到线程0释放了该锁后，才能执行</span><br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;我是线程&quot;</span> + Thread.currentThread().getName());<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">3000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;结束&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Thread t1 = <span class="hljs-keyword">new</span> Thread(instance);<br>        Thread t2 = <span class="hljs-keyword">new</span> Thread(instance);<br>        t1.start();<br>        t2.start();<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*output：</span><br><span class="hljs-comment">我是线程Thread-0</span><br><span class="hljs-comment">Thread-0结束</span><br><span class="hljs-comment">我是线程Thread-1</span><br><span class="hljs-comment">Thread-1结束</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SynchronizedObjectLock</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> SynchronizedObjectLock instence = <span class="hljs-keyword">new</span> SynchronizedObjectLock();<br>    <span class="hljs-comment">// 创建2把锁</span><br>    Object block1 = <span class="hljs-keyword">new</span> Object();<br>    Object block2 = <span class="hljs-keyword">new</span> Object();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 这个代码块使用的是第一把锁，当他释放后，后面的代码块由于使用的是第二把锁，因此可以马上执行</span><br>        <span class="hljs-keyword">synchronized</span> (block1) &#123;<br>            System.out.println(<span class="hljs-string">&quot;block1锁,我是线程&quot;</span> + Thread.currentThread().getName());<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">3000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;block1锁,&quot;</span>+Thread.currentThread().getName() + <span class="hljs-string">&quot;结束&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">synchronized</span> (block2) &#123;<br>            System.out.println(<span class="hljs-string">&quot;block2锁,我是线程&quot;</span> + Thread.currentThread().getName());<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">3000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;block2锁,&quot;</span>+Thread.currentThread().getName() + <span class="hljs-string">&quot;结束&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Thread t1 = <span class="hljs-keyword">new</span> Thread(instence);<br>        Thread t2 = <span class="hljs-keyword">new</span> Thread(instence);<br>        t1.start();<br>        t2.start();<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*output：</span><br><span class="hljs-comment">block1锁,我是线程Thread-0</span><br><span class="hljs-comment">block1锁,Thread-0结束</span><br><span class="hljs-comment">block2锁,我是线程Thread-0　　// 可以看到当第一个线程在执行完第一段同步代码块之后，第二个同步代码块可以马上得到执行，因为他们使用的锁不是同一把</span><br><span class="hljs-comment">block1锁,我是线程Thread-1</span><br><span class="hljs-comment">block2锁,Thread-0结束</span><br><span class="hljs-comment">block1锁,Thread-1结束</span><br><span class="hljs-comment">block2锁,我是线程Thread-1</span><br><span class="hljs-comment">block2锁,Thread-1结束</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>方法锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SynchronizedObjectLock</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> SynchronizedObjectLock instence = <span class="hljs-keyword">new</span> SynchronizedObjectLock();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        method();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我是线程&quot;</span> + Thread.currentThread().getName());<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">3000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;结束&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Thread t1 = <span class="hljs-keyword">new</span> Thread(instence);<br>        Thread t2 = <span class="hljs-keyword">new</span> Thread(instence);<br>        t1.start();<br>        t2.start();<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*output：</span><br><span class="hljs-comment">我是线程Thread-0</span><br><span class="hljs-comment">Thread-0结束</span><br><span class="hljs-comment">我是线程Thread-1</span><br><span class="hljs-comment">Thread-1结束</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><ul><li>类锁 （指synchronize修饰静态的方法或指定锁对象为Class对象）</li></ul><p>静态方法都属于类所以无论是修饰静态方法还是指定对象为class，哪个线程访问它，需要的锁都只有一把</p><h3 id="Synchronized本质上是通过什么保证线程安全的-分三个方面回答：加锁和释放锁的原理，可重入原理，保证可见性原理"><a href="#Synchronized本质上是通过什么保证线程安全的-分三个方面回答：加锁和释放锁的原理，可重入原理，保证可见性原理" class="headerlink" title="Synchronized本质上是通过什么保证线程安全的? 分三个方面回答：加锁和释放锁的原理，可重入原理，保证可见性原理"></a>Synchronized本质上是通过什么保证线程安全的? 分三个方面回答：加锁和释放锁的原理，可重入原理，保证可见性原理</h3><p><strong>Ans</strong>: 通过Monitor来控制线程对对象的访问，同一时间一个对象只能和一个monitor关联而一个monitor在同一时间只能被一个线程获得，monitor保证了互斥并且锁是可重入的当线程获取该对象锁后，计数器+1，释放-1，当计时器为0时下一个线程可以从同步队列中获取锁。通过sychronized的happens-before，对同一个监视器的解锁，happens-before于对该监视器的加锁即先进入修改线程的结果对后来的线程是可见的</p><ul><li>加锁和释放锁的原理</li></ul><p>Monitor：通过反编译可以看到有这么两个指令<strong>monitorenter，monitorexit</strong></p><p>monitorenter：</p><ul><li>monitor计数器为0，意味着目前还没有被获得，那这个线程就会立刻获得然后把锁计数器+1，一旦+1，别的线程再想获取，就需要等待</li><li>如果这个monitor已经拿到了这个锁的所有权，又重入了这把锁，那锁计数器就会累加，变成2，并且随着重入的次数，会一直累加</li><li>这把锁已经被别的线程获取了，等待锁释放</li></ul><p>monitorexit：<br>释放对于monitor的所有权，释放过程很简单，就是讲monitor的计数器减1，如果减完以后，计数器不是0，则代表刚才是重入进来的，当前线程还继续持有这把锁的所有权，如果计数器变成0，则代表当前线程不再拥有该monitor的所有权，即释放锁</p><p><img src="https://user-images.githubusercontent.com/58756074/138994203-9d01a992-aa14-4427-941f-f55a0ebc81e4.png" alt="java-thread-x-key-schronized-2"><br><strong>可重入原理：加锁次数计数器</strong><br>Synchronized先天具有重入性。每个对象拥有一个计数器，当线程获取该对象锁后，计数器就会加一，释放锁后就会将计数器减一</p><p><strong>保证可见性的原理：内存模型和happens-before规则</strong><br>Synchronized的happens-before规则，即监视器锁规则：对同一个监视器的解锁，happens-before于对该监视器的加锁</p><h3 id="Synchronized有什么样的缺陷-Java-Lock是怎么弥补这些缺陷的"><a href="#Synchronized有什么样的缺陷-Java-Lock是怎么弥补这些缺陷的" class="headerlink" title="Synchronized有什么样的缺陷? Java Lock是怎么弥补这些缺陷的"></a>Synchronized有什么样的缺陷? Java Lock是怎么弥补这些缺陷的</h3><p><strong>Ans</strong> 缺陷：不够灵活加锁释放时机单一（Condition与Lock的结合解决了这个问题），效率低锁释放情况少（一种是代码正常运行结束释放锁，另一种是产生异常释放锁），试图获得锁时不能设定超时，不能中断一个正在试图获得锁的线程（定时和中断lock都可以做到），无法知道是否成功获取到了锁（lock可以知道tryLock()）</p><h3 id="Synchronized和Lock的对比，和选择"><a href="#Synchronized和Lock的对比，和选择" class="headerlink" title="Synchronized和Lock的对比，和选择"></a>Synchronized和Lock的对比，和选择</h3><p><strong>Ans</strong>：在能选择的情况下，既不要用Lock也不要用synchronized关键字，用java.util.concurrent包中的各种各样的类，如果不用该包下的类，在满足业务的情况下，可以使用synchronized关键，因为代码量少，避免出错</p><h3 id="Synchronized在使用时有何注意事项"><a href="#Synchronized在使用时有何注意事项" class="headerlink" title="Synchronized在使用时有何注意事项?"></a>Synchronized在使用时有何注意事项?</h3><ul><li>锁对象不能为空，因为锁的信息都保存在对象头里</li><li>避免死锁</li><li>作用域不宜过大，影响程序执行的速度，控制范围过大，编写代码也容易出错</li><li>在能选择的情况下，既不要用Lock也不要用synchronized关键字，用java.util.concurrent包中的各种各样的类，如果不用该包下的类，在满足业务的情况下，可以使用synchronized关键，因为代码量少，避免出错</li></ul><h3 id="Synchronized修饰的方法在抛出异常时-会释放锁吗"><a href="#Synchronized修饰的方法在抛出异常时-会释放锁吗" class="headerlink" title="Synchronized修饰的方法在抛出异常时,会释放锁吗"></a>Synchronized修饰的方法在抛出异常时,会释放锁吗</h3><p><strong>Ans</strong>:synchronized修饰的方法，无论方法正常执行完毕还是抛出异常，都会释放锁</p><h3 id="多个线程等待同一个synchronized锁的时候，JVM如何选择下一个获取锁的线程"><a href="#多个线程等待同一个synchronized锁的时候，JVM如何选择下一个获取锁的线程" class="headerlink" title="多个线程等待同一个synchronized锁的时候，JVM如何选择下一个获取锁的线程"></a>多个线程等待同一个synchronized锁的时候，JVM如何选择下一个获取锁的线程</h3><p><strong>Ans</strong>:多线程竞争一个锁时，其余未得到锁的线程只能不停的尝试获得锁，而不能中断。高并发的情况下会导致性能下降。<br>这个问题就涉及到内部锁的调度机制，线程获取 synchronized 对应的锁，也是有具体的调度算法的，这个和具体的虚拟机版本和实现都有关系，所以下一个获取锁的线程是事先没办法预测的</p><h3 id="Synchronized使得同时只有一个线程可以执行，性能比较差，有什么提升的方法"><a href="#Synchronized使得同时只有一个线程可以执行，性能比较差，有什么提升的方法" class="headerlink" title="Synchronized使得同时只有一个线程可以执行，性能比较差，有什么提升的方法"></a>Synchronized使得同时只有一个线程可以执行，性能比较差，有什么提升的方法</h3><p><strong>Ans</strong>: 优化 synchronized 的使用范围，让临界区的代码在符合要求的情况下尽可能的小.使用其他类型的 lock（锁），synchronized 使用的锁经过 jdk 版本的升级，性能已经大幅提升了，但相对于更加轻量级的锁（如读写锁）还是偏重一点，所以可以选择更合适的锁</p><h3 id="我想更加灵活地控制锁的释放和获取-现在释放锁和获取锁的时机都被规定死了-，怎么办"><a href="#我想更加灵活地控制锁的释放和获取-现在释放锁和获取锁的时机都被规定死了-，怎么办" class="headerlink" title="我想更加灵活地控制锁的释放和获取(现在释放锁和获取锁的时机都被规定死了)，怎么办"></a>我想更加灵活地控制锁的释放和获取(现在释放锁和获取锁的时机都被规定死了)，怎么办</h3><p><strong>Ans</strong>:Synchronized只有锁只与一个条件(是否获取锁)相关联，不灵活，后来Condition与Lock的结合解决了这个问题。</p><h3 id="什么是锁的升级和降级-什么是JVM里的偏向锁、轻量级锁、重量级锁"><a href="#什么是锁的升级和降级-什么是JVM里的偏向锁、轻量级锁、重量级锁" class="headerlink" title="什么是锁的升级和降级? 什么是JVM里的偏向锁、轻量级锁、重量级锁"></a>什么是锁的升级和降级? 什么是JVM里的偏向锁、轻量级锁、重量级锁</h3><p><strong>Ans</strong>：对于不同的竞争情况，会自动切换到合适的锁实现。当没有竞争出现时，默认使用偏斜锁，也即是在对象头的 Mark Word 部分设置线程ID，来表示锁对象偏向的线程，但这并不是互斥锁；当有其他线程试图锁定某个已被偏斜过的锁对象，JVM 就撤销偏斜锁，切换到轻量级锁，轻量级锁依赖 CAS 操作对象头的 Mark Word 来试图获取锁，如果重试成功，就使用普通的轻量级锁；否则进一步升级为重量级锁。锁的降级发生在当 JVM 进入安全点后，检查是否有闲置的锁，并试图进行降级。锁的升级和降级都是出于性能的考虑。</p><p>jdk 1.6引入大量实现优化：</p><ul><li>**锁粗化(Lock Coarsening)**：（多次上锁变为一次大范围锁）也就是减少不必要的紧连在一起的unlock，lock操作，将多个连续的锁扩展成一个范围更大的锁</li><li>**锁消除(Lock Elimination)**：通过运行时JIT编译器的逃逸分析来消除一些没有在当前同步块以外被其他线程共享的数据的锁保护，通过逃逸分析也可以在线程本地Stack上进行对象空间的分配(同时还可以减少Heap上的垃圾收集开销)</li></ul><p>JVM会判断再一段程序中的同步明显不会逃逸出去从而被其他线程访问到，那JVM就把它们当作栈上数据对待，认为这些数据时线程独有的，不需要加同步。此时就会进行锁消除<br>​当然在实际开发中，我们很清楚的知道那些地方时线程独有的，不需要加同步锁，但是在Java API中有很多方法都是加了同步的，</p><ul><li>**轻量级锁(Lightweight Locking)**：假设大部分代码处于无锁竞争，避免调用操作系统层面的重量级互斥锁取而代之的是在monitorenter和monitorexit中只需要依靠一条CAS原子指令就可以完成锁的获取及释放。当存在锁竞争的情况下，执行CAS指令失败的线程将调用操作系统互斥锁进入到阻塞状态，当锁被释放的时候被唤醒<br><img src="https://user-images.githubusercontent.com/58756074/139001269-55778675-ad21-44ff-beb9-3cf8de9fd7d8.png" alt="轻量级锁CAS操作之前堆栈和对象状态"><br>HotSpot虚拟机中对象头地内存布局（Object header）两部分组成（hashcode，GC Age，锁标志位等（mark world） + 指向方法区对象类型数据的指针（class point））</li></ul><p>加锁：JVM在thread stack中创建一个Lock Record存储object的Mark world的拷贝，JVM使用CAS操作将标记字段Mark Word拷贝到锁记录中，并且将Mark Word更新为指向Lock Record的指针。如果更新成功了，那么这个线程就有用了该对象的锁，并且对象Mark Word的锁标志位更新为(Mark Word中最后的2bit)00，即表示此对象处于轻量级锁定状态。如果更新操作<strong>失败</strong>JVM会去检查Mark Word是否存在指向当前线程的栈帧的指针，如果有，说明该锁已经被获取，可以直接调用。如果没有，则说明该锁被其他线程抢占了，如果有两条以上的线程竞争同一个锁，那轻量级锁就不再有效，直接膨胀位重量级锁，没有获得锁的线程会被阻塞。此时，锁的标志位为10.Mark Word中存储的时指向重量级锁的指针</p><p>解锁：会使用原子的CAS操作将Displaced Mark Word（hcode，GC age，01）替换回到对象头中，如果成功，则表示没有发生竞争关系。如果失败，表示当前锁存在竞争关系。锁就会膨胀成重量级锁:<br><img src="https://user-images.githubusercontent.com/58756074/139001275-cca9ddad-d9d6-476d-ba38-484f9536e049.png" alt="轻量级锁及膨胀流程"></p><ul><li><strong>偏向锁(Biased Locking)</strong>:是为了在无锁竞争的情况下避免在锁获取过程中执行不必要的CAS原子指令，因为CAS原子指令虽然相对于重量级锁来说开销比较小但还是存在非常可观的本地延迟<br>当一个线程访问同步快并获取锁时，会在对象头和栈帧中的锁记录里存储锁偏向的线程ID，以后该线程在进入和退出同步块时不需要进行CAS操作来加锁和解锁。只需要简单地测试一下对象头的Mark Word里是否存储着指向当前线程的偏向锁。如果成功，表示线程已经获取到了锁<br><img src="https://user-images.githubusercontent.com/58756074/139001280-9ed3a25a-e62f-450f-a023-584679a96723.png" alt="偏向锁及轻量级锁"><br>撤销：偏向锁使用了一种等待竞争出现才会释放锁的机制。所以当其他线程尝试获取偏向锁时，持有偏向锁的线程才会释放锁。但是偏向锁的撤销需要等到全局安全点(就是当前线程没有正在执行的字节码)。它会首先暂停拥有偏向锁的线程，让你后检查持有偏向锁的线程是否活着。如果线程不处于活动状态，直接将对象头设置为无锁状态。如果线程活着，JVM会遍历栈帧中的锁记录，栈帧中的锁记录和对象头要么偏向于其他线程，要么恢复到无锁状态或者标记对象不适合作为偏向锁。<br><img src="https://user-images.githubusercontent.com/58756074/139001284-07f4410e-c6c7-425c-82ee-d5a224d81da0.png" alt="偏向锁获得和撤销"></li><li><strong>适应性自旋(Adaptive Spinning)</strong>:当线程在获取轻量级锁的过程中执行CAS操作失败时，在进入与monitor相关联的操作系统重量级锁(mutex semaphore)前会进入忙等待(Spinning)然<br>后再次尝试，当尝试一定的次数后如果仍然没有成功则调用与该monitor关联的semaphore(即互斥锁)进入到阻塞状态</li></ul><p><strong>锁膨胀方向： 无锁 → 偏向锁 → 轻量级锁 → 重量级锁 (此过程是不可逆的)</strong></p><ul><li>自旋锁：当获取锁失败时，不交出cpu使用权，忙等待，如果等待时间不长做线程切换的代价是高于忙等待的代价的</li><li>自适应自旋锁：自旋的时间不再固定了，而是由前一次在同一个锁上的自旋 时间及锁的拥有者的状态来决定的，如果在同一个锁对象上，自旋等待刚刚成功获取过锁，并且持有锁的线程正在运行中，那么JVM会认为该锁自旋获取到锁的可能性很大，会自动增加等待时间<h3 id="不同的JDK中对Synchronized有何优化"><a href="#不同的JDK中对Synchronized有何优化" class="headerlink" title="不同的JDK中对Synchronized有何优化"></a>不同的JDK中对Synchronized有何优化</h3>JVM中monitorenter和monitorexit字节码依赖于底层的操作系统的Mutex Lock来实现的，但是由于使用Mutex Lock需要将当前线程挂起并从用户态切换到内核态来执行，这种切换的代价是非常昂贵的；然而在现实中的大部分情况下，同步方法是运行在单线程环境(无锁竞争环境)如果每次都调用Mutex Lock那么将严重的影响程序的性能<br>在jdk1.6中对锁的实现引入了大量的优化，如锁粗化(Lock Coarsening)、锁消除(Lock Elimination)、轻量级锁(Lightweight Locking)、偏向锁(Biased Locking)、适应性自旋(Adaptive Spinning)等技术来减少锁操作的开销</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Juc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>异地多活</title>
    <link href="/2021/10/22/%E5%BC%82%E5%9C%B0%E5%A4%9A%E6%B4%BB/"/>
    <url>/2021/10/22/%E5%BC%82%E5%9C%B0%E5%A4%9A%E6%B4%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="系统可用性"><a href="#系统可用性" class="headerlink" title="系统可用性"></a>系统可用性</h3><p>好的软件架构：</p><ol><li>高性能 （延迟低）</li><li>高可用  </li><li>易拓展  (迭代新功能成本低)</li></ol><p>高可用：</p><ul><li><p><strong>平均故障间隔 MTBF（Mean Time Between Failure）</strong>：表示两次故障的间隔时间，也就是系统「正常运行」的平均时间，这个时间越长，说明系统稳定性越高</p></li><li><p><strong>故障恢复时间 MTTR（Mean Time To Repair）</strong>：表示系统发生故障后「恢复的时间」，这个值越小，故障对用户的影响越小</p></li></ul><p><strong>可用性（Availability）= MTBF / (MTBF + MTTR) * 100%</strong></p><p><img src="https://user-images.githubusercontent.com/58756074/138387511-ffcaf080-f779-41f1-851d-394b2c6e19be.jpg" alt="N个9"></p><h3 id="单机架构"><a href="#单机架构" class="headerlink" title="单机架构"></a>单机架构</h3><p>应用直接读写数据库，但需要注意的是，这里的数据库是「单机」部署的，所以它有一个致命的缺点：一旦遭遇意外，例如磁盘损坏、操作系统异常、误删数据，那这意味着所有数据就全部「丢失」了，这个损失是巨大的。</p><p>解决方法备份的问题：</p><ol><li><strong>恢复需要时间</strong>：业务需先停机，再恢复数据，停机时间取决于恢复的速度，恢复期间服务「不可用」</li><li><strong>数据不完整</strong>：因为是定期备份，数据肯定不是「最新」的，数据完整程度取决于备份的周期<br>很明显，你的数据库越大，意味故障恢复时间越久。那按照前面我们提到的「高可用」标准，这个方案可能连 1 个 9 都达不到，远远无法满足我们对可用性的要求。</li></ol><h3 id="主从副本"><a href="#主从副本" class="headerlink" title="主从副本"></a>主从副本</h3><p>你可以在另一台机器上，再部署一个数据库实例，让这个新实例成为原实例的「副本」，让两者保持「实时同步」</p><p>master-slave优点：</p><ul><li><strong>数据完整性高</strong>：主从副本实时同步，数据「差异」很小</li><li><strong>抗故障能力提升</strong>：主库有任何异常，从库可随时「切换」为主库，继续提供服务</li><li><strong>读性能提升</strong>：业务应用可直接读从库，分担主库「压力」读压力</li></ul><p>这个方案不错，不仅大大提高了数据库的可用性，还提升了系统的读性能，同样的思路，你的「业务应用」也可以在其它机器部署一份，避免单点。因为业务应用通常是「无状态」的（不像数据库那样存储数据），所以直接部署即可，非常简单。</p><p>因为业务应用部署了多个，所以你现在还需要部署一个「接入层」，来做请求的「负载均衡」（一般会使用 nginx 或 LVS），这样当一台机器宕机后，另一台机器也可以「接管」所有流量，持续提供服务。</p><p><strong>冗余</strong>是设计核心</p><h3 id="风险不可控"><a href="#风险不可控" class="headerlink" title="风险不可控"></a>风险不可控</h3><p>而一个机房有很多服务器，这些服务器通常会分布在一个个「机柜」上，如果你使用的这些机器，刚好在一个机柜，还是存在风险。就算不在同一机柜也在同一个环境下：机房</p><p>例子：</p><ul><li>杭州市某地光纤被挖断，近 3 亿用户长达 5 小时无法访问支付宝</li><li>B 站部分服务器机房发生故障，造成整站持续 3 个小时无法访问（印象深刻）</li><li>富途证券服务器机房发生电力闪断故障，造成用户 2 个小时无法登陆、交易</li></ul><p>对付机房基本的问题还是冗余</p><h3 id="同城灾备"><a href="#同城灾备" class="headerlink" title="同城灾备"></a>同城灾备</h3><p>机房备份 （冷备：B 机房只做备份，不提供实时服务，它是冷的，只会在 A 机房故障时才会启用）但备份的问题依旧和之前描述的一样：数据不完整、恢复数据期间业务不可用，整个系统的可用性还是无法得到保证</p><p>主从副本：</p><ol><li>B 机房所有从库提升为主库</li><li>在 B 机房部署应用，启动服务</li><li>部署接入层，配置转发规则</li><li>DNS 指向 B 机房，接入流量，业务恢复</li></ol><p>因此，要想缩短业务恢复的时间，你必须把这些工作在 B 机房「提前」做好，也就是说，你需要在 B 机房提前部署好接入层、业务应用，等待随时切换。架构就变成了这样：</p><p>这样只有两件事： B 机房所有从库提升为主库 和 DNS 指向 B 机房，接入流量，业务恢复<br><strong>热备份</strong>：随时可切换<br><img src="https://user-images.githubusercontent.com/58756074/138390185-bf5c3486-3703-4802-b3b2-37deb48cc3da.jpg" alt="热备份"></p><h3 id="同城双活"><a href="#同城双活" class="headerlink" title="同城双活"></a>同城双活</h3><p>让B机房也接入流量通过DNS，单纯在故障时使用有点浪费，平时还可以分流<br>从库readonly，<strong>读写分离</strong>即两个机房的「读」流量，可以读任意机房的存储，但「写」流量，只允许写 A 机房，因为主库在 A 机房。</p><p>两个机房部署在「同城」，物理距离比较近，而且两个机房用「专线」网络连接，虽然跨机房访问的延迟，比单个机房内要大一些，但整体的延迟还是可以接受的。</p><h3 id="两地三中心"><a href="#两地三中心" class="headerlink" title="两地三中心"></a>两地三中心</h3><p>两个机房还是在同一个城市，接着冗余，建议两个机房的距离要在 1000 公里以上，这样才能应对城市级别的灾难。<br><strong>两地是指 2 个城市，三中心是指有 3 个机房，其中 2 个机房在同一个城市，并且同时提供服务，第 3 个机房部署在异地，只做数据灾备</strong></p><h3 id="伪异地双活"><a href="#伪异地双活" class="headerlink" title="伪异地双活"></a>伪异地双活</h3><p>跨城专线带来的网络延迟，因为两个机房距离较远，受到物理距离的限制，现在，两地之间的网络延迟就变成了「不可忽视」的因素了。</p><h3 id="真正的异地双活"><a href="#真正的异地双活" class="headerlink" title="真正的异地双活"></a>真正的异地双活</h3><p>两个机房的存储必须都是「主库」，而且两个机房的数据还要「互相同步」数据，即客户端无论写哪一个机房，都能把这条数据同步到另一个机房。<br>因为只有两个机房都拥有「全量数据」，才能支持任意切换机房，持续提供服务。</p><p>MySQL 本身就提供了双主架构，它支持双向复制数据，但平时用的并不多。而且 Redis、MongoDB 等数据库并没有提供这个功能，所以，你必须开发对应的「数据同步中间件」来实现双向同步的功能。</p><p>这样可能会带来数据冲突，数据没有在对方机房里同步时</p><p>一种方法：数据同步中间件要有自动「合并」数据、解决「冲突」的能力如依赖时钟，但这种方案需要两个机房的「时钟」严格保持一致才行，否则很容易出现问题</p><h3 id="如何实施异地双活"><a href="#如何实施异地双活" class="headerlink" title="如何实施异地双活"></a>如何实施异地双活</h3><p><strong>在最上层接入流量时，就不要让冲突的情况发生</strong> 避免跨机房 路由规则有三类</p><ol><li><p>按业务类型分片<br>假设我们一共有 4 个应用，北京和上海机房都部署这些应用。但应用 1、2 只在北京机房接入流量，在上海机房只是热备。应用 3、4 只在上海机房接入流量，在北京机房是热备。</p></li><li><p>直接哈希分片<br>这种方案就是，最上层的路由层，会根据用户 ID 计算「哈希」取模，然后从路由表中找到对应的机房，之后把请求转发到指定机房内。</p></li><li><p>按地理位置分片<br>这种方案，非常适合与地理位置密切相关的业务，例如打车、外卖服务就非常适合这种方案。<br>北京、河北地区的用户点餐，请求只会打到北京机房，而上海、浙江地区的用户，请求则只会打到上海机房。这样的分片规则，也能避免数据冲突。</p></li></ol><p><strong>让同一个用户的相关请求，只在一个机房内完成所有业务「闭环」，不再出现「跨机房」访问</strong></p><p>现在，两个机房就可以都接收「读写」流量（做好分片的请求），底层存储保持「双向」同步，两个机房都拥有全量数据，当任意机房故障时，另一个机房就可以「接管」全部流量，实现快速切换</p><p>不仅如此，因为机房部署在异地，我们还可以更细化地「优化」路由规则，让用户访问就近的机房，这样整个系统的性能也会大大提升。</p><h3 id="异地多活"><a href="#异地多活" class="headerlink" title="异地多活"></a>异地多活</h3><p>服务按照「单元化」的部署方式，可以让每个机房部署在任意地区，随时扩展新机房，你只需要在最上层定义好分片规则就好了。<br>但这里还有一个小问题，随着扩展的机房越来越多，当一个机房写入数据后，需要同步的机房也越来越多，这个实现复杂度会比较高。</p><p><img src="https://user-images.githubusercontent.com/58756074/138391560-2d8b5f9b-c729-455f-bea5-f224df6e7dd5.jpg" alt="异地多活"></p><p>这种方案必须设立一个「中心机房」，任意机房写入数据后，都只同步到中心机房，再由中心机房同步至其它机房，一个机房写入数据，只需要同步数据到中心机房即可，不需要再关心一共部署了多少个机房，实现复杂度大大「简化」。</p><p>但与此同时，这个中心机房的「稳定性」要求会比较高。不过也还好，即使中心机房发生故障，我们也可以把任意一个机房，提升为中心机房，继续按照之前的架构提供服务。</p><p><strong>可以任意扩展机房「就近」部署。任意机房发生故障，可以完成快速「切换」</strong></p>]]></content>
    
    
    <categories>
      
      <category>框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分布式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内核接收网络包</title>
    <link href="/2021/10/22/%E5%86%85%E6%A0%B8%E6%8E%A5%E6%94%B6%E7%BD%91%E7%BB%9C%E5%8C%85/"/>
    <url>/2021/10/22/%E5%86%85%E6%A0%B8%E6%8E%A5%E6%94%B6%E7%BD%91%E7%BB%9C%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="到达网卡"><a href="#到达网卡" class="headerlink" title="到达网卡"></a>到达网卡</h3><p>网卡接收网络包并存放在网卡内的缓冲区，实质上就是把网线中的高低电平，转换到网卡上的一个缓冲区中存储着</p><p>再由网卡缓冲区加载到内存缓冲区通过DMA，这个过程的前提是，<strong>网卡驱动</strong>需要在内存中申请一个缓冲区叫 <strong>sk_buffer</strong>，然后把这个 sk_buffer 的地址告诉网卡，这样 DMA 才知道等网卡的缓冲区有数据到来时，把它拷贝到内存的什么位置上。</p><h3 id="网卡发出中断（硬中断）"><a href="#网卡发出中断（硬中断）" class="headerlink" title="网卡发出中断（硬中断）"></a>网卡发出中断（硬中断）</h3><p>网卡向 CPU 发起中断信号，CPU 打断当前的程序，根据中断号找到中断处理程序，开始执行。<br>硬中断几乎啥也没干，将网卡设备 dev 放入 poll_list 里，然后立刻发起了一次软中断，然后就结束了。<br>这是为了尽快响应硬中断，以便计算机可以尽快处理下一个硬中断，毕竟鼠标点击、键盘敲击等需要响应特别及时。而像网络包到来后的拷贝和解析过程，在硬中断面前优先级没那么高，所以就触发一个软中断等着内核线程去执行就好了。</p><h3 id="软中断"><a href="#软中断" class="headerlink" title="软中断"></a>软中断</h3><p>软中断遍历 poll_list 取出一个个的设备 dev，然后调用其 poll 函数，移步IP网络层拿到IP包再交给上传传输层拿到TCP包解析出来的数据，由应用程序去接受和处理，就是我们的 socket bind listen read 的流程了</p><p>我们常说协议栈不断去掉头部，交给上层协议栈处理，这句话在代码层面其实就是网络层协议解析的方法 ip_rcv 里的末尾调用了传输层协议解析的方法 tcp_v4_rcv，仅此而已。</p><p>而说 Linux 处理中断是分上半部和下半部的方案，代码层面就是硬中断处理函数的代码里，直接发起一个软中断，然后便返回，仅此而已。</p><p><img src="https://user-images.githubusercontent.com/58756074/138385642-d9d7800a-e375-45fb-b4ab-4d6d7be9e052.png" alt="网络包到应用程序"></p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>中断</title>
    <link href="/2021/10/21/%E4%B8%AD%E6%96%AD/"/>
    <url>/2021/10/21/%E4%B8%AD%E6%96%AD/</url>
    
    <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p>内核接收网络包的起点就是中断（硬中断和软中断）</p><h3 id="整个操作系统就是一个中断驱动的死循环"><a href="#整个操作系统就是一个中断驱动的死循环" class="headerlink" title="整个操作系统就是一个中断驱动的死循环"></a>整个操作系统就是一个中断驱动的死循环</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>    doNothing();<br>&#125;<br></code></pre></td></tr></table></figure><p>其他所有事情都是由操作系统提前注册的中断机制和其对应的中断处理函数完成，我们点击一下鼠标，敲击一下键盘，执行一个程序，都是用中断的方式来通知操作系统帮我们处理这些事件，当没有任何需要操作系统处理的事件时，它就乖乖停在死循环里不出来。</p><h3 id="中断分类"><a href="#中断分类" class="headerlink" title="中断分类"></a>中断分类</h3><ul><li><p>中断 interrupts</p></li><li><p>异常 exception</p><ul><li>故障 faults</li><li>陷阱 traps</li><li>终止 aborts</li></ul></li></ul><p>CPU 提供了两种中断（verb）程序执行的机制，中断和异常。</p><p>先说第一个机制中断（interrupt），中断是一个异步事件，通常由 IO 设备触发。比如点击一下鼠标、敲击一下键盘等。</p><p>再说第二个机制异常（exception），异常是一个同步事件，是 CPU 在执行指令时检测到的反常条件。比如除法异常、错误指令异常，缺页异常等。</p><p>这两个机制，殊途同归，都是让 CPU 收到一个中断号</p><p>除上两种机制外，还有一种方式可以给到 CPU 一个中断号，INT指令（比如 INT 0x80，就是告诉 CPU 中断号是 0x80。Linux 内核提供的系统调用，就是用了 INT 0x80 这种指令）</p><p>有的地方喜欢把他们做一些区分，把 INT n 这种方式叫做软件中断，因为他是由软件程序主动触发的。相应的把上面的中断和异常叫做硬件中断，因为他们都是硬件自动触发的。</p><h3 id="给-CPU-一个中断号有三种方式"><a href="#给-CPU-一个中断号有三种方式" class="headerlink" title="给 CPU 一个中断号有三种方式"></a>给 CPU 一个中断号有三种方式</h3><ol><li><p><strong>通过中断控制器给 CPU 的 INTR 引脚发送信号</strong>，并且允许 CPU 从中断控制器的一个端口上读取中断号，比如按下键盘的一个按键，最终会给到 CPU 一个 0x21 中断号。</p></li><li><p><strong>CPU 执行某条指令发现了异常</strong>，会自己触发并给自己一个中断号，比如执行到了无效指令，CPU 会给自己一个 0x06 的中断号。</p></li><li><p><strong>执行 INT n 指令</strong>，会直接给 CPU 一个中断号 n，比如触发了 Linux 的系统调用，实际上就是执行了 INT 0x80 指令，那么 CPU 收到的就是一个 0x80 中断号。</p></li></ol><h3 id="CPU接收中断号后"><a href="#CPU接收中断号后" class="headerlink" title="CPU接收中断号后"></a>CPU接收中断号后</h3><p><strong>Roughly：CPU 收到一个中断号 n 后，会去中断向量表中寻找第 n 个中断描述符，从中断描述符中找到中断处理程序的地址，然后跳过去执行</strong></p><p>为什么说不准确这又涉及到操作系统的段式内存（段选因子+offset）通过段选因子找到段基址然后配合offset找到程序入口</p><ul><li><p>中断描述表（Interrupt Descriptor Table）就是一个在内存中的数组而已</p></li><li><p>中断描述符（desc_struct）就是中断描述符表这个数组里的存储的数据结构</p></li></ul><p>CPU通过IDTR寄存器找到IDT</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>现在这些都是硬中断（硬件完成的中断），当然这里也要有软件的配合，比如软件需要提前把中断向量表写在内存里，并通过 IDTR 寄存器告诉 CPU 它的起始位置在哪里。</p><p><strong>软中断是纯粹由软件实现的一种类似中断的机制</strong>，实际上它就是模仿硬件，在内存中有一个地方存储着软中断的标志位，然后由内核的一个线程不断轮询这些标志位，如果有哪个标志位有效，则再去另一个地方寻找这个软中断对应的中断处理程序。</p><h3 id="软中断"><a href="#软中断" class="headerlink" title="软中断"></a>软中断</h3><p>软中断是纯软件实现的，也是打断当前正在运行的程序，转而去执行中断处理程序，执行完之后再返回原程序。</p><p>硬中断的微观层面，就是 CPU 在每一个指令周期的最后，都会留一个 CPU 周期去查看是否有中断，如果有，就把中断号取出，去中断向量表中寻找中断处理程序，然后跳过去。</p><p>软中断的微观层面，简单说就是有一个<strong>单独的守护进程</strong>，不断轮询一组<strong>标志位</strong>，如果哪个标志位有值了，那去这个标志位对应的<strong>软中断向量表数组</strong>的相应位置，找到软中断处理函数，然后跳过去。</p><h3 id="开启内核软中断处理的守护进程"><a href="#开启内核软中断处理的守护进程" class="headerlink" title="开启内核软中断处理的守护进程"></a>开启内核软中断处理的守护进程</h3><p><img src="https://user-images.githubusercontent.com/58756074/138382715-f06ca2c9-5d4b-49ef-9cd0-0fcba5f78076.png" alt="Linux开机过程"></p><p>start_kernel: rest_init: 开启内核软中断守护进程</p><p>软中断向量表 softirq_vec，就是个数组嘛，然后里面的元素存储着软中断处理程序的地址指针</p><p><strong>不断遍历 pending 这个软中断标志位的每一位，如果是 0 就忽略，如果是 1，那从上面的 h 软中断向量表中找到对应的元素，然后执行 action 方法，action 就对应着不同的软中断处理函数</strong></p><h3 id="软中断两步走"><a href="#软中断两步走" class="headerlink" title="软中断两步走"></a>软中断两步走</h3><ol><li><p><strong>注册软中断向量表</strong>，其实就是把软中断向量表的每个 action 变量赋值，相当于硬中断中注册中断向量表的过程。<br>比如，<strong>网络子系统的初始化</strong>，有一步就需要<strong>注册网络的软中断处理函数</strong>。</p></li><li><p><strong>触发一个软中断</strong>，其实就是修改 pending 的某个标志位，触发一次软中断，相当于硬中断中由外部硬件、异常、或者 INT 指令来触发硬中断一样。</p></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>软中断是 Linux 处理一个中断的下半部的主要方式</strong>，比如 Linux 某网卡接收了一个数据包，此时会触发一个硬中断，由于处理数据包的过程比较耗时，而硬中断资源又非常宝贵，如果占着硬中断函数不返回，会影响到其他硬中断的相应速度，比如点击鼠标、按下键盘等。</p><p>所以一般 Linux 会把中断分成**上下两半部分执行，上半部分处理最简单的逻辑，下半部分直接丢给一个软中断异步处理。</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>interrupt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown</title>
    <link href="/2021/10/20/Markdown/"/>
    <url>/2021/10/20/Markdown/</url>
    
    <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 这是一级标题</span><br><span class="hljs-comment">## 这是二级标题</span><br><span class="hljs-comment">### 这是三级标题</span><br><span class="hljs-comment">#### 这是四级标题</span><br><span class="hljs-comment">##### 这是五级标题</span><br><span class="hljs-comment">###### 这是六级标题</span><br></code></pre></td></tr></table></figure><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">**这是加粗的文字**<br>*这是倾斜的文字*`<br>***这是斜体加粗的文字***<br>~~这是加删除线的文字~~<br></code></pre></td></tr></table></figure><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;这是引用的内容<br>&gt;&gt;这是引用的内容<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容<br></code></pre></td></tr></table></figure><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">---<br>----<br>***<br>*****<br></code></pre></td></tr></table></figure><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">![图片alt](图片地址 <span class="hljs-string">&#x27;&#x27;</span>图片title<span class="hljs-string">&#x27;&#x27;</span>)<br><br>图片alt就是显示在图片下面的文字，相当于对图片内容的解释。<br>图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加<br></code></pre></td></tr></table></figure><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[超链接名](超链接地址 <span class="hljs-string">&quot;超链接title&quot;</span>)<br>title可加可不加<br></code></pre></td></tr></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">- 列表内容<br>+ 列表内容<br>* 列表内容<br><br>注意：- + * 跟内容之间都要有一个空格<br><br>1. 列表内容<br>2. 列表内容<br>3. 列表内容<br><br>注意：序号跟内容之间要有空格<br><br></code></pre></td></tr></table></figure><h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">上一级和下一级之间敲三个空格即可<br>- 列表<br>   - 二级列表<br>   - 二级列表<br></code></pre></td></tr></table></figure><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">表头|表头|表头<br>---|:--:|---:<br>内容|内容|内容<br>内容|内容|内容<br><br>第二行分割表头和内容。<br>- 有一个就行，为了对齐，多加了几个<br>文字默认居左<br>-两边加：表示文字居中<br>-右边加：表示文字居右<br>注：原生的语法两边都要用 | 包起来。此处省略<br></code></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">单行     `代码内容`<br>(```)<br>  代码...<br>  代码...<br>  代码...<br>(```)<br>注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。<br></code></pre></td></tr></table></figure><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">```flow<br>st=&gt;start: 开始<br>op=&gt;operation: My Operation<br>cond=&gt;condition: Yes or No?<br>e=&gt;end<br>st-&gt;op-&gt;cond<br>cond(yes)-&gt;e<br>cond(no)-&gt;op<br>&amp;`<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hosts File</title>
    <link href="/2021/10/20/Hosts-File/"/>
    <url>/2021/10/20/Hosts-File/</url>
    
    <content type="html"><![CDATA[<p>Hosts file是将域名和IP建立mapping，相当于DNS缓存，浏览器会先优先在hosts里查找IP，如果没有则系统再将网址提交DNS域名解析服务器进行解析</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="TBA"><a href="#TBA" class="headerlink" title="TBA"></a>TBA</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> /etc<br>$ vim hosts<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hosts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Two Git Accounts On One Device</title>
    <link href="/2021/10/20/Two-Git-Accounts-On-One-Device/"/>
    <url>/2021/10/20/Two-Git-Accounts-On-One-Device/</url>
    
    <content type="html"><![CDATA[<p>This blog will discuss how to maintain two github accounts on one device.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Generate-SSH-keys"><a href="#Generate-SSH-keys" class="headerlink" title="Generate SSH keys"></a>Generate SSH keys</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh-keygen -t rsa -C <span class="hljs-string">&quot;email address&quot;</span><br></code></pre></td></tr></table></figure><p>Note:</p><p>-b specify the size of keyfile “bits”</p><p>-t means type should usually be rsa , dsa , ecdsa</p><p>-c means comment Changes the comment for the keyfile</p><h3 id="Register-pub-key-to-github"><a href="#Register-pub-key-to-github" class="headerlink" title="Register pub key to github"></a>Register pub key to github</h3><p>skip (Settings/SSH and GPG)</p><h3 id="Create-a-config-file-at-ssh"><a href="#Create-a-config-file-at-ssh" class="headerlink" title="Create a config file at ~/.ssh"></a>Create a config file at ~/.ssh</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># tw(xiang.li4@thoughtworks.com)</span><br>Host github.com-LiXiang-TW<br>   HostName github.com<br>   User git<br>   IdentityFile ~/.ssh/id_rsa.tw<br>   IdentitiesOnly yes<br><br><span class="hljs-comment"># me(xili7209@gmail.com)</span><br>Host github.com-xili7209<br>   HostName github.com<br>   User git<br>   IdentityFile ~/.ssh/id_rsa.me<br>   IdentitiesOnly yes<br><br></code></pre></td></tr></table></figure><h3 id="Clone-the-repo-replace-github-com-with-github-com-xili7209-LiXiang-TW"><a href="#Clone-the-repo-replace-github-com-with-github-com-xili7209-LiXiang-TW" class="headerlink" title="Clone the repo (replace github.com with github.com-xili7209/LiXiang-TW)"></a>Clone the repo (replace github.com with github.com-xili7209/LiXiang-TW)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> git@github.com-GitId:GitId/your-repo-name.git (your-repo-name_GitId)<br></code></pre></td></tr></table></figure><h3 id="Configure-git-identity"><a href="#Configure-git-identity" class="headerlink" title="Configure git identity"></a>Configure git identity</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[user]<br>    name = git name<br>    email = ***@gmail.com<br></code></pre></td></tr></table></figure><h3 id="Ensure-reomte-url-is-git-remote-set-url-origin-103-105-116-x40-x67-x69-x74-x68-117-98-x2e-x63-111-109-x2d-103-105-x74-78-x61-109-101-gitName-your-repo-name-git-your-repo-name-gitName"><a href="#Ensure-reomte-url-is-git-remote-set-url-origin-103-105-116-x40-x67-x69-x74-x68-117-98-x2e-x63-111-109-x2d-103-105-x74-78-x61-109-101-gitName-your-repo-name-git-your-repo-name-gitName" class="headerlink" title="Ensure reomte url is git remote set-url origin &#103;&#105;&#116;&#x40;&#x67;&#x69;&#x74;&#x68;&#117;&#98;&#x2e;&#x63;&#111;&#109;&#x2d;&#103;&#105;&#x74;&#78;&#x61;&#109;&#101;:gitName/your-repo-name.git (your-repo-name_gitName)"></a>Ensure reomte url is <strong>git remote set-url origin <a href="mailto:&#103;&#105;&#116;&#x40;&#x67;&#x69;&#x74;&#x68;&#117;&#98;&#x2e;&#x63;&#111;&#109;&#x2d;&#103;&#105;&#x74;&#78;&#x61;&#109;&#101;">&#103;&#105;&#116;&#x40;&#x67;&#x69;&#x74;&#x68;&#117;&#98;&#x2e;&#x63;&#111;&#109;&#x2d;&#103;&#105;&#x74;&#78;&#x61;&#109;&#101;</a>:gitName/your-repo-name.git (your-repo-name_gitName)</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[remote <span class="hljs-string">&quot;origin&quot;</span>] <br>       url = git@github.com-gitName:gitName/your-repo-name.git<br>       fetch = +refs/heads/*:refs/remotes/origin/*<br></code></pre></td></tr></table></figure><p>More info: <a href="https://gist.github.com/Jonalogy/54091c98946cfe4f8cdab2bea79430f9">Handle_Multi_GitAccount</a></p>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Terminal-ShortCut</title>
    <link href="/2021/10/20/Terminal-ShortCut/"/>
    <url>/2021/10/20/Terminal-ShortCut/</url>
    
    <content type="html"><![CDATA[<p>终端快捷键</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash">Ctrl+a：光标回到命令行首。 （a：ahead）<br><br>Ctrl+a：光标回到命令行首。 （a：ahead）<br><br>Ctrl+e：光标回到命令行尾。 （e：end）<br><br>Ctrl+b：光标向行首移动一个字符。 （b：backwards）<br><br>Ctrl+ f：光标向行尾移动一个字符。 （f：forwards）<br><br>Ctrl+w: 删除光标处到行首的字符。<br><br>Ctrl+k：删除光标处到行尾的字符。<br><br>Ctrl+u：删除整个命令行文本字符。<br><br>Ctrl+h：向行首删除一个字符。<br><br>Ctrl+d：向行尾删除一个字符。<br><br>Ctrl+y:：粘贴Ctrl+u，Ctrl+k，Ctrl+w删除的文本。<br><br>Ctrl+p: 上一个使用的历史命令。 （p：previous）<br><br>Ctrl+n： 下一个使用的历史命令。（n：next ）<br><br>Ctrl+r：快速检索历史命令。（r：retrieve）。<br><br>Ctrl+t： 交换光标所在字符和其前的字符。<br><br>Ctrl+i：相当于Tab键。<br><br>Ctrl+o：相当于Ctrl+m.<br><br>Ctrl+m：相当Enter键。<br></code></pre></td></tr></table></figure><h3 id="其他快捷键"><a href="#其他快捷键" class="headerlink" title="其他快捷键"></a>其他快捷键</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">Ctrl+s:使终端发呆，静止，可以使快速输出的终端屏幕停下来。<br><br>Ctrl+q：退出Ctrl+s引起的发呆。<br><br>Ctrl+z：使正在运行在终端的任务，运行于后台。 （可用<span class="hljs-built_in">fg</span>恢复）<br><br>Ctrl+c：中断终端中正在执行的任务。<br><br>Ctrl+d: 在空命令行的情况下可以退出终端。<br><br>Ctrl+[ ：相当于Esc键。<br><br>Esc键：连续按3次显示所有的支持的终端命令。<br><br>Tab键：命令、文件名等自动补全功能。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>shortcut</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/10/20/hello-world/"/>
    <url>/2021/10/20/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate  <span class="hljs-comment">#hexo g</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy  <span class="hljs-comment">#hexo d</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="Hexo-Clean-amp-amp-Hexo-Deploy"><a href="#Hexo-Clean-amp-amp-Hexo-Deploy" class="headerlink" title="Hexo Clean &amp;&amp; Hexo Deploy"></a>Hexo Clean &amp;&amp; Hexo Deploy</h3><p>Note: 部署需要注意congfig.yml里deploy下仓库格式：<a href="mailto:&#x67;&#x69;&#x74;&#x40;&#x67;&#105;&#116;&#104;&#x75;&#98;&#x2e;&#99;&#x6f;&#x6d;">&#x67;&#x69;&#x74;&#x40;&#x67;&#105;&#116;&#104;&#x75;&#98;&#x2e;&#99;&#x6f;&#x6d;</a>:liuxianan/liuxianan.github.io.git（不要用https）</p><h3 id="注意front-matter（—）页面格式内容应该在front-matter内编辑"><a href="#注意front-matter（—）页面格式内容应该在front-matter内编辑" class="headerlink" title="注意front matter（—）页面格式内容应该在front matter内编辑"></a>注意front matter（—）页面格式内容应该在front matter内编辑</h3>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
