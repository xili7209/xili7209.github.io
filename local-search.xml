<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>中断</title>
    <link href="/2021/10/21/%E4%B8%AD%E6%96%AD/"/>
    <url>/2021/10/21/%E4%B8%AD%E6%96%AD/</url>
    
    <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p>内核接收网络包的起点就是中断（硬中断和软中断）</p><h3 id="整个操作系统就是一个中断驱动的死循环"><a href="#整个操作系统就是一个中断驱动的死循环" class="headerlink" title="整个操作系统就是一个中断驱动的死循环"></a>整个操作系统就是一个中断驱动的死循环</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>    doNothing();<br>&#125;<br></code></pre></td></tr></table></figure><p>其他所有事情都是由操作系统提前注册的中断机制和其对应的中断处理函数完成，我们点击一下鼠标，敲击一下键盘，执行一个程序，都是用中断的方式来通知操作系统帮我们处理这些事件，当没有任何需要操作系统处理的事件时，它就乖乖停在死循环里不出来。</p><h3 id="中断分类"><a href="#中断分类" class="headerlink" title="中断分类"></a>中断分类</h3><ul><li><p>中断 interrupts</p></li><li><p>异常 exception</p><ul><li>故障 faults</li><li>陷阱 traps</li><li>终止 aborts</li></ul></li></ul><p>CPU 提供了两种中断（verb）程序执行的机制，中断和异常。</p><p>先说第一个机制中断（interrupt），中断是一个异步事件，通常由 IO 设备触发。比如点击一下鼠标、敲击一下键盘等。</p><p>再说第二个机制异常（exception），异常是一个同步事件，是 CPU 在执行指令时检测到的反常条件。比如除法异常、错误指令异常，缺页异常等。</p><p>这两个机制，殊途同归，都是让 CPU 收到一个中断号</p><p>除上两种机制外，还有一种方式可以给到 CPU 一个中断号，INT指令（比如 INT 0x80，就是告诉 CPU 中断号是 0x80。Linux 内核提供的系统调用，就是用了 INT 0x80 这种指令）</p><p>有的地方喜欢把他们做一些区分，把 INT n 这种方式叫做软件中断，因为他是由软件程序主动触发的。相应的把上面的中断和异常叫做硬件中断，因为他们都是硬件自动触发的。</p><h3 id="给-CPU-一个中断号有三种方式"><a href="#给-CPU-一个中断号有三种方式" class="headerlink" title="给 CPU 一个中断号有三种方式"></a>给 CPU 一个中断号有三种方式</h3><ol><li><p><strong>通过中断控制器给 CPU 的 INTR 引脚发送信号</strong>，并且允许 CPU 从中断控制器的一个端口上读取中断号，比如按下键盘的一个按键，最终会给到 CPU 一个 0x21 中断号。</p></li><li><p><strong>CPU 执行某条指令发现了异常</strong>，会自己触发并给自己一个中断号，比如执行到了无效指令，CPU 会给自己一个 0x06 的中断号。</p></li><li><p><strong>执行 INT n 指令</strong>，会直接给 CPU 一个中断号 n，比如触发了 Linux 的系统调用，实际上就是执行了 INT 0x80 指令，那么 CPU 收到的就是一个 0x80 中断号。</p></li></ol><h3 id="CPU接收中断号后"><a href="#CPU接收中断号后" class="headerlink" title="CPU接收中断号后"></a>CPU接收中断号后</h3><p><strong>Roughly：CPU 收到一个中断号 n 后，会去中断向量表中寻找第 n 个中断描述符，从中断描述符中找到中断处理程序的地址，然后跳过去执行</strong></p><p>为什么说不准确这又涉及到操作系统的段式内存（段选因子+offset）通过段选因子找到段基址然后配合offset找到程序入口</p><ul><li><p>中断描述表（Interrupt Descriptor Table）就是一个在内存中的数组而已</p></li><li><p>中断描述符（desc_struct）就是中断描述符表这个数组里的存储的数据结构</p></li></ul><p>CPU通过IDTR寄存器找到IDT</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>现在这些都是硬中断（硬件完成的中断），当然这里也要有软件的配合，比如软件需要提前把中断向量表写在内存里，并通过 IDTR 寄存器告诉 CPU 它的起始位置在哪里。</p><p><strong>软中断是纯粹由软件实现的一种类似中断的机制</strong>，实际上它就是模仿硬件，在内存中有一个地方存储着软中断的标志位，然后由内核的一个线程不断轮询这些标志位，如果有哪个标志位有效，则再去另一个地方寻找这个软中断对应的中断处理程序。</p><h3 id="软中断"><a href="#软中断" class="headerlink" title="软中断"></a>软中断</h3><p>软中断是纯软件实现的，也是打断当前正在运行的程序，转而去执行中断处理程序，执行完之后再返回原程序。</p><p>硬中断的微观层面，就是 CPU 在每一个指令周期的最后，都会留一个 CPU 周期去查看是否有中断，如果有，就把中断号取出，去中断向量表中寻找中断处理程序，然后跳过去。</p><p>软中断的微观层面，简单说就是有一个<strong>单独的守护进程</strong>，不断轮询一组<strong>标志位</strong>，如果哪个标志位有值了，那去这个标志位对应的<strong>软中断向量表数组</strong>的相应位置，找到软中断处理函数，然后跳过去。</p><h3 id="开启内核软中断处理的守护进程"><a href="#开启内核软中断处理的守护进程" class="headerlink" title="开启内核软中断处理的守护进程"></a>开启内核软中断处理的守护进程</h3><p><img src="https://user-images.githubusercontent.com/58756074/138382715-f06ca2c9-5d4b-49ef-9cd0-0fcba5f78076.png" alt="Linux开机过程"></p><p>start_kernel: rest_init: 开启内核软中断守护进程</p><p>软中断向量表 softirq_vec，就是个数组嘛，然后里面的元素存储着软中断处理程序的地址指针</p><p><strong>不断遍历 pending 这个软中断标志位的每一位，如果是 0 就忽略，如果是 1，那从上面的 h 软中断向量表中找到对应的元素，然后执行 action 方法，action 就对应着不同的软中断处理函数</strong></p><h3 id="软中断两步走"><a href="#软中断两步走" class="headerlink" title="软中断两步走"></a>软中断两步走</h3><ol><li><p><strong>注册软中断向量表</strong>，其实就是把软中断向量表的每个 action 变量赋值，相当于硬中断中注册中断向量表的过程。<br>比如，<strong>网络子系统的初始化</strong>，有一步就需要<strong>注册网络的软中断处理函数</strong>。</p></li><li><p><strong>触发一个软中断</strong>，其实就是修改 pending 的某个标志位，触发一次软中断，相当于硬中断中由外部硬件、异常、或者 INT 指令来触发硬中断一样。</p></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>软中断是 Linux 处理一个中断的下半部的主要方式</strong>，比如 Linux 某网卡接收了一个数据包，此时会触发一个硬中断，由于处理数据包的过程比较耗时，而硬中断资源又非常宝贵，如果占着硬中断函数不返回，会影响到其他硬中断的相应速度，比如点击鼠标、按下键盘等。</p><p>所以一般 Linux 会把中断分成**上下两半部分执行，上半部分处理最简单的逻辑，下半部分直接丢给一个软中断异步处理。</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>interrupt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown</title>
    <link href="/2021/10/20/Markdown/"/>
    <url>/2021/10/20/Markdown/</url>
    
    <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 这是一级标题</span><br><span class="hljs-comment">## 这是二级标题</span><br><span class="hljs-comment">### 这是三级标题</span><br><span class="hljs-comment">#### 这是四级标题</span><br><span class="hljs-comment">##### 这是五级标题</span><br><span class="hljs-comment">###### 这是六级标题</span><br></code></pre></td></tr></table></figure><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">**这是加粗的文字**<br>*这是倾斜的文字*`<br>***这是斜体加粗的文字***<br>~~这是加删除线的文字~~<br></code></pre></td></tr></table></figure><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;这是引用的内容<br>&gt;&gt;这是引用的内容<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容<br></code></pre></td></tr></table></figure><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">---<br>----<br>***<br>*****<br></code></pre></td></tr></table></figure><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">![图片alt](图片地址 <span class="hljs-string">&#x27;&#x27;</span>图片title<span class="hljs-string">&#x27;&#x27;</span>)<br><br>图片alt就是显示在图片下面的文字，相当于对图片内容的解释。<br>图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加<br></code></pre></td></tr></table></figure><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[超链接名](超链接地址 <span class="hljs-string">&quot;超链接title&quot;</span>)<br>title可加可不加<br></code></pre></td></tr></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">- 列表内容<br>+ 列表内容<br>* 列表内容<br><br>注意：- + * 跟内容之间都要有一个空格<br><br>1. 列表内容<br>2. 列表内容<br>3. 列表内容<br><br>注意：序号跟内容之间要有空格<br><br></code></pre></td></tr></table></figure><h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">上一级和下一级之间敲三个空格即可<br>- 列表<br>   - 二级列表<br>   - 二级列表<br></code></pre></td></tr></table></figure><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">表头|表头|表头<br>---|:--:|---:<br>内容|内容|内容<br>内容|内容|内容<br><br>第二行分割表头和内容。<br>- 有一个就行，为了对齐，多加了几个<br>文字默认居左<br>-两边加：表示文字居中<br>-右边加：表示文字居右<br>注：原生的语法两边都要用 | 包起来。此处省略<br></code></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">单行     `代码内容`<br>(```)<br>  代码...<br>  代码...<br>  代码...<br>(```)<br>注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。<br></code></pre></td></tr></table></figure><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">```flow<br>st=&gt;start: 开始<br>op=&gt;operation: My Operation<br>cond=&gt;condition: Yes or No?<br>e=&gt;end<br>st-&gt;op-&gt;cond<br>cond(yes)-&gt;e<br>cond(no)-&gt;op<br>&amp;`<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hosts File</title>
    <link href="/2021/10/20/Hosts-File/"/>
    <url>/2021/10/20/Hosts-File/</url>
    
    <content type="html"><![CDATA[<p>Hosts file是将域名和IP建立mapping，相当于DNS缓存，浏览器会先优先在hosts里查找IP，如果没有则系统再将网址提交DNS域名解析服务器进行解析</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="TBA"><a href="#TBA" class="headerlink" title="TBA"></a>TBA</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> /etc<br>$ vim hosts<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hosts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Two Git Accounts On One Device</title>
    <link href="/2021/10/20/Two-Git-Accounts-On-One-Device/"/>
    <url>/2021/10/20/Two-Git-Accounts-On-One-Device/</url>
    
    <content type="html"><![CDATA[<p>This blog will discuss how to maintain two github accounts on one device.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Generate-SSH-keys"><a href="#Generate-SSH-keys" class="headerlink" title="Generate SSH keys"></a>Generate SSH keys</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh-keygen -t rsa -C <span class="hljs-string">&quot;email address&quot;</span><br></code></pre></td></tr></table></figure><p>Note:</p><p>-b specify the size of keyfile “bits”</p><p>-t means type should usually be rsa , dsa , ecdsa</p><p>-c means comment Changes the comment for the keyfile</p><h3 id="Register-pub-key-to-github"><a href="#Register-pub-key-to-github" class="headerlink" title="Register pub key to github"></a>Register pub key to github</h3><p>skip (Settings/SSH and GPG)</p><h3 id="Create-a-config-file-at-ssh"><a href="#Create-a-config-file-at-ssh" class="headerlink" title="Create a config file at ~/.ssh"></a>Create a config file at ~/.ssh</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># tw(xiang.li4@thoughtworks.com)</span><br>Host github.com-LiXiang-TW<br>   HostName github.com<br>   User git<br>   IdentityFile ~/.ssh/id_rsa.tw<br>   IdentitiesOnly yes<br><br><span class="hljs-comment"># me(xili7209@gmail.com)</span><br>Host github.com-xili7209<br>   HostName github.com<br>   User git<br>   IdentityFile ~/.ssh/id_rsa.me<br>   IdentitiesOnly yes<br><br></code></pre></td></tr></table></figure><h3 id="Clone-the-repo-replace-github-com-with-github-com-xili7209-LiXiang-TW"><a href="#Clone-the-repo-replace-github-com-with-github-com-xili7209-LiXiang-TW" class="headerlink" title="Clone the repo (replace github.com with github.com-xili7209/LiXiang-TW)"></a>Clone the repo (replace github.com with github.com-xili7209/LiXiang-TW)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> git@github.com-GitId:GitId/your-repo-name.git (your-repo-name_GitId)<br></code></pre></td></tr></table></figure><h3 id="Configure-git-identity"><a href="#Configure-git-identity" class="headerlink" title="Configure git identity"></a>Configure git identity</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[user]<br>    name = git name<br>    email = ***@gmail.com<br></code></pre></td></tr></table></figure><h3 id="Ensure-reomte-url-is-git-remote-set-url-origin-103-x69-116-64-103-x69-x74-104-117-98-x2e-99-x6f-109-x2d-x67-x69-116-78-97-x6d-101-gitName-your-repo-name-git-your-repo-name-gitName"><a href="#Ensure-reomte-url-is-git-remote-set-url-origin-103-x69-116-64-103-x69-x74-104-117-98-x2e-99-x6f-109-x2d-x67-x69-116-78-97-x6d-101-gitName-your-repo-name-git-your-repo-name-gitName" class="headerlink" title="Ensure reomte url is git remote set-url origin &#103;&#x69;&#116;&#64;&#103;&#x69;&#x74;&#104;&#117;&#98;&#x2e;&#99;&#x6f;&#109;&#x2d;&#x67;&#x69;&#116;&#78;&#97;&#x6d;&#101;:gitName/your-repo-name.git (your-repo-name_gitName)"></a>Ensure reomte url is <strong>git remote set-url origin <a href="mailto:&#103;&#x69;&#116;&#64;&#103;&#x69;&#x74;&#104;&#117;&#98;&#x2e;&#99;&#x6f;&#109;&#x2d;&#x67;&#x69;&#116;&#78;&#97;&#x6d;&#101;">&#103;&#x69;&#116;&#64;&#103;&#x69;&#x74;&#104;&#117;&#98;&#x2e;&#99;&#x6f;&#109;&#x2d;&#x67;&#x69;&#116;&#78;&#97;&#x6d;&#101;</a>:gitName/your-repo-name.git (your-repo-name_gitName)</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[remote <span class="hljs-string">&quot;origin&quot;</span>] <br>       url = git@github.com-gitName:gitName/your-repo-name.git<br>       fetch = +refs/heads/*:refs/remotes/origin/*<br></code></pre></td></tr></table></figure><p>More info: <a href="https://gist.github.com/Jonalogy/54091c98946cfe4f8cdab2bea79430f9">Handle_Multi_GitAccount</a></p>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Terminal-ShortCut</title>
    <link href="/2021/10/20/Terminal-ShortCut/"/>
    <url>/2021/10/20/Terminal-ShortCut/</url>
    
    <content type="html"><![CDATA[<p>终端快捷键</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash">Ctrl+a：光标回到命令行首。 （a：ahead）<br><br>Ctrl+a：光标回到命令行首。 （a：ahead）<br><br>Ctrl+e：光标回到命令行尾。 （e：end）<br><br>Ctrl+b：光标向行首移动一个字符。 （b：backwards）<br><br>Ctrl+ f：光标向行尾移动一个字符。 （f：forwards）<br><br>Ctrl+w: 删除光标处到行首的字符。<br><br>Ctrl+k：删除光标处到行尾的字符。<br><br>Ctrl+u：删除整个命令行文本字符。<br><br>Ctrl+h：向行首删除一个字符。<br><br>Ctrl+d：向行尾删除一个字符。<br><br>Ctrl+y:：粘贴Ctrl+u，Ctrl+k，Ctrl+w删除的文本。<br><br>Ctrl+p: 上一个使用的历史命令。 （p：previous）<br><br>Ctrl+n： 下一个使用的历史命令。（n：next ）<br><br>Ctrl+r：快速检索历史命令。（r：retrieve）。<br><br>Ctrl+t： 交换光标所在字符和其前的字符。<br><br>Ctrl+i：相当于Tab键。<br><br>Ctrl+o：相当于Ctrl+m.<br><br>Ctrl+m：相当Enter键。<br></code></pre></td></tr></table></figure><h3 id="其他快捷键"><a href="#其他快捷键" class="headerlink" title="其他快捷键"></a>其他快捷键</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">Ctrl+s:使终端发呆，静止，可以使快速输出的终端屏幕停下来。<br><br>Ctrl+q：退出Ctrl+s引起的发呆。<br><br>Ctrl+z：使正在运行在终端的任务，运行于后台。 （可用<span class="hljs-built_in">fg</span>恢复）<br><br>Ctrl+c：中断终端中正在执行的任务。<br><br>Ctrl+d: 在空命令行的情况下可以退出终端。<br><br>Ctrl+[ ：相当于Esc键。<br><br>Esc键：连续按3次显示所有的支持的终端命令。<br><br>Tab键：命令、文件名等自动补全功能。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>shortcut</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/10/20/hello-world/"/>
    <url>/2021/10/20/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate  <span class="hljs-comment">#hexo g</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy  <span class="hljs-comment">#hexo d</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="Hexo-Clean-amp-amp-Hexo-Deploy"><a href="#Hexo-Clean-amp-amp-Hexo-Deploy" class="headerlink" title="Hexo Clean &amp;&amp; Hexo Deploy"></a>Hexo Clean &amp;&amp; Hexo Deploy</h3><p>Note: 部署需要注意congfig.yml里deploy下仓库格式：<a href="mailto:&#x67;&#105;&#116;&#64;&#103;&#x69;&#116;&#x68;&#x75;&#x62;&#46;&#x63;&#111;&#109;">&#x67;&#105;&#116;&#64;&#103;&#x69;&#116;&#x68;&#x75;&#x62;&#46;&#x63;&#111;&#109;</a>:liuxianan/liuxianan.github.io.git（不要用https）</p><h3 id="注意front-matter（—）页面格式内容应该在front-matter内编辑"><a href="#注意front-matter（—）页面格式内容应该在front-matter内编辑" class="headerlink" title="注意front matter（—）页面格式内容应该在front matter内编辑"></a>注意front matter（—）页面格式内容应该在front matter内编辑</h3>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
